apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'


android {
  def globalConfiguration = rootProject.extensions.getByName("ext")

  compileSdkVersion globalConfiguration.getAt("androidCompileSdkVersion")
  buildToolsVersion globalConfiguration.getAt("androidBuildToolsVersion")


  defaultConfig {
    applicationId globalConfiguration.getAt("androidApplicationId")
    minSdkVersion globalConfiguration.getAt("androidMinSdkVersion")
    targetSdkVersion globalConfiguration.getAt("androidTargetSdkVersion")
    versionCode globalConfiguration.getAt("androidVersionCode")
    versionName globalConfiguration.getAt("androidVersionName")
    testInstrumentationRunner globalConfiguration.getAt("testInstrumentationRunner")
    testApplicationId globalConfiguration.getAt("testApplicationId")
  }
  aaptOptions {
    additionalParameters "--no-version-vectors"
  }

  lintOptions {
    abortOnError false

  }

  packagingOptions {
    //    exclude 'LICENSE.txt'
    //    exclude 'META-INF/DEPENDENCIES'
    //    exclude 'META-INF/ASL2.0'
    //    exclude 'META-INF/NOTICE'
    //    exclude 'META-INF/LICENSE'
  }

  signingConfigs {
    debug {
      //      storeFile file('../config/buildsystem/debug.keystore')
      //      storePassword 'android'
      //      keyAlias 'androiddebugkey'
      //      keyPassword 'android'
    }
  }
  applicationVariants.all { variant ->
    variant.outputs.each { output ->
      def newApkName
      //If there's no ZipAlign task it means that our artifact will be unaligned and we need to mark it as such.
      if (output.zipAlign) {
        newApkName = appName + "-${variant.versionName}.apk"
      } else {
        newApkName = appName + "-${variant.versionName}-unaligned.apk"
      }
      output.outputFile = new File(output.outputFile.parent, newApkName)
    }
  }
  sourceSets {
    main.java.srcDirs += 'src/main'
  }
  buildTypes {
    release {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
  }
}

dependencies {

  def presentationDependencies = rootProject.ext.presentationDependencies
  def presentationTestDependencies = rootProject.ext.presentationTestDependencies
  def dataDependencies = rootProject.ext.dataDependencies

  compile presentationDependencies.supportAppCompat
  compile presentationDependencies.constraintLayout

  compile "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"

  androidTestCompile (presentationTestDependencies.espresso, {
    exclude group: 'com.android.support', module: 'support-annotations'
  })

}
repositories {
  mavenCentral()
}